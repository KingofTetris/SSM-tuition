<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--引入外部文件-->
    <!--再说一次classpath就是 war包下/web-inf/classes这个路径-->
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
    <!--开启组件扫描，让Spring认识注解-->
    <!--除了controller其他包都要扫描-->
    <context:component-scan base-package="com.atguigu.ssm">
        <!--把被Controller注解的类排除在外，交给SpringMVC扫描-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--开启事务的注解驱动@Transactional
    将使用@Transactional标识的方法或类中的所以方法进行事务管理
    -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--配置SqlSessionFactoryBean-->
    <!--这个bean不需要ID，也不会是返回这个工厂，
    而是直接返回工厂提供的对象SqlSessionFactory
    也就可以直接从SpringIoC中获取SqlSessionFactory
    就可以自动注入SqlSessionFactory对象获取bean
    -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--设置Mybatis核心配置文件的路径-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="dataSource" ref="dataSource"></property>
        <!--给pojo包下的类取别名，默认为忽略大小写的类名-->
        <property name="typeAliasesPackage" value="com.atguigu.ssm.pojo"></property>
        <!--如果你的mapper接口和映射文件在同一个目录下，并且你配置了下面的MapperScannerConfigurer
        就没必要设置下面的属性 默认就配置好了。
            如果你没有配置MapperScannerConfigurer，还是需要写出来
            另外如果目录不一致，你需要像下面这样配置
        -->
<!--    <property name="mapperLocations" value="classpath:mappers/*.xml"></property>-->
    </bean>

    <!--配置Mapper接口的扫描,可以把设置包com.atguigu.ssm.mapper下的所有mapper接口
        通过上面配置的SqlSession创建代理实现类对象，并且把这些对象交给IoC管理
        这样你就可以在任何一个组件自动装配Mapper接口
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!---->
        <property name="basePackage" value="com.atguigu.ssm.mapper"></property>
    </bean>
</beans>