<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--开启组件扫描，让SpringMVC认识注解-->
    <!--SpringMVC IoC容器需要管理的bean-->
    <context:component-scan base-package="com.atguigu.controller"></context:component-scan>

    <!-- 配置Thymeleaf视图解析器 -->
    <!--被这个ThymeleafViewResolver解析的view就是ThymeleafView-->
    <bean id="viewResolver"
          class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean
                            class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!--逻辑视图加上前后缀就能确定要跳转的页面-->
                        <!--这样以后写地址就不用加上.html了-->
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>


    <!--设置DispatcherServlet处理不了的请求交给服务器容器的Servlet进行处理-->
    <!--另外需要开启 <mvc:annotation-driven/>
        ,同时也是单独加<mvc:default-servlet-handler/>也是将请求首先交给
        容器的默认Servlet进行处理
    -->
    <mvc:default-servlet-handler/>

    <!--开启mvc的注解驱动-->
    <mvc:annotation-driven/>
    <!--视图控制器，当请求就是为了跳转到某个视图，就没必要再写个Controller出来了
        直接配置访问路径 "/",视图 "index"即可
    -->
    <!--但是要注意你配置了视图控制器标签以后，就只有配置的路径会被DispatcherSerlvet处理
           其他的请求都不会，也就会全部404
           所以还得额外配置<mvc:annotation-driven/>,开启mvc的注解驱动
    -->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>

    <!--SpringMVC配置静态资源的请求将会被容器这里就是Tomcat9中的默认Servlet处理，
    而不会交给DispatcherServlet。-->
<!--    <mvc:resources mapping="/static/**" location=tatic/"/s" />-->

    <!--配置文件上传解析器
    而且SpringMVC读取这个对象，是根据ID读取的，它有一个固定的名字multipartResolver 绝对不能改。
    因为MultipartFile是个接口你肯定得找个实现类来注入
    我们用CommonsMultipartResolver
    -->
    <!--这里要加上id的原因在于你上面在web.xml里面
        配置了 <load-on-startup>1</load-on-startup>
        把DispatcherServlet的初始化放在了服务器启动时。
    -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    </bean>
<!--&lt;!&ndash;    配置拦截器&ndash;&gt;-->
<!--&lt;!&ndash;    在mvc:interceptors&ndash;&gt;-->
<!--&lt;!&ndash;    普通bean和ref过滤器对DispatcherServlet处理的所有请求都进行拦截&ndash;&gt;-->
<!--    <mvc:interceptors>-->
<!--        <ref bean="firstInterceptor"></ref>-->
<!--        <ref bean="secondInterceptor"></ref>-->
<!--        &lt;!&ndash;下面进行精确拦截&ndash;&gt;-->
<!--        <mvc:interceptor>-->
<!--&lt;!&ndash;            指定拦截请求以及特例exclude&ndash;&gt;-->
<!--&lt;!&ndash;            拦截器里面/* 只能拦截工程名后的一层请求&ndash;&gt;-->
<!--&lt;!&ndash;            /** 工程名后所有请求都拦截&ndash;&gt;-->
<!--            <mvc:mapping path="/**"/>-->
<!--            &lt;!&ndash;不需要拦截的请求&ndash;&gt;-->
<!--            <mvc:exclude-mapping path="/abc"/>-->
<!--            <ref bean="firstInterceptor"></ref>-->
<!--        </mvc:interceptor>-->
<!--    </mvc:interceptors>-->

    <!--异常处理器-->
    <!--SimpleMappingExceptionResolver就是SpringMVC给你的自定义异常处理类-->
<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
<!--        <property name="exceptionMappings">-->
<!--            <props>-->
<!--                &lt;!&ndash;下面就是出现对应的异常需要往哪跳&ndash;&gt;-->
<!--                <prop key="java.lang.ArithmeticException">error</prop>-->
<!--            </props>-->
<!--        </property>-->
<!--        &lt;!&ndash;这个ex就标识共享在请求域中的异常的键名&ndash;&gt;-->
<!--        <property name="exceptionAttribute" value="ex">-->
<!--        </property>-->
<!--    </bean>-->
</beans>